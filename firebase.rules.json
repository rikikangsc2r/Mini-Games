{
  "rules": {
    // Apply a common set of security rules to all game types
    "$game_key": {
      ".validate": "$game_key === 'games' || $game_key === 'gobblet-games' || $game_key === 'chess-games' || $game_key === 'connect4-games' || $game_key === 'crossword-games'",
      
      "$room_id": {
        // Anyone can read a game's state. This is required for the "share room ID" feature to work.
        ".read": true,

        // Writes are permitted but are heavily scrutinized by the validation rules below.
        ".write": true,

        // --- CORE VALIDATION RULE ---
        // Enforce the data schema for every game room on every write operation.
        // This prevents data corruption and is a massive security improvement.
        ".validate": "newData.hasChildren(['players', 'createdAt', 'currentPlayer', 'startingPlayer', 'rematch'])",

        "players": {
          "X": {
            // Player X must have a deviceId, name, and avatar. deviceId can only change during a valid player swap or if the room is expired.
            ".validate": "
              newData.hasChildren(['deviceId', 'name', 'avatarUrl']) &&
              newData.child('deviceId').isString() &&
              newData.child('name').isString() && newData.child('name').val().length > 0 && newData.child('name').val().length < 30 &&
              newData.child('avatarUrl').isString() && newData.child('avatarUrl').val().length > 0 &&
              (
                !data.child('deviceId').exists() || // Allow on creation
                data.child('deviceId').val() === newData.child('deviceId').val() || // Allow if unchanged
                ( // Allow if swapping with player O
                  newData.child('deviceId').val() === data.parent().child('O/deviceId').val() &&
                  newData.parent().child('O/deviceId').val() === data.child('deviceId').val()
                ) ||
                (now - data.parent().parent().child('createdAt').val() > 3600000) // Allow if room is older than 1 hour
              )
            "
          },
          "O": {
             // Player O is optional, but if present, must be valid. deviceId can only change during a valid player swap.
            ".validate": "
              !newData.exists() || (
                newData.hasChildren(['deviceId', 'name', 'avatarUrl']) &&
                newData.child('deviceId').isString() &&
                newData.child('name').isString() && newData.child('name').val().length > 0 && newData.child('name').val().length < 30 &&
                newData.child('avatarUrl').isString() && newData.child('avatarUrl').val().length > 0 &&
                (
                  !data.child('deviceId').exists() || // Allow on creation
                  data.child('deviceId').val() === newData.child('deviceId').val() || // Allow if unchanged
                  ( // Allow if swapping with player X
                    newData.child('deviceId').val() === data.parent().child('X/deviceId').val() &&
                    newData.parent().child('X/deviceId').val() === data.child('deviceId').val()
                  )
                )
              )
            "
          },
          // Disallow other properties like 'players/Y'
          "$other": { ".validate": "$other === 'X' || $other === 'O'" }
        },

        "currentPlayer": {
          ".validate": "newData.isString() && (newData.val() === 'X' || newData.val() === 'O')"
        },

        "startingPlayer": {
          ".validate": "newData.isString() && (newData.val() === 'X' || newData.val() === 'O')"
        },

        "winner": {
            // Winner is optional. If set, it must be a valid value.
            // This rule allows setting a winner once, and resetting it to null for rematches.
            ".validate": "
              // Allow the value to be null (game in progress, or reset for rematch).
              newData.val() === null ||
              // If setting a winner, it must be a valid string, and it can only be set if there wasn't a winner before (or the previous value was null).
              (
                (!data.exists() || data.val() === null) &&
                newData.isString() &&
                (newData.val() === 'X' || newData.val() === 'O' || newData.val() === 'Draw')
              )
            "
        },

        "createdAt": {
          // Must be a number. On creation, it must be the server timestamp. It can only be changed if the room is older than 1 hour.
          ".validate": "newData.isNumber() && (!data.exists() ? newData.val() === now : (newData.val() === data.val() || (now - data.val() > 3600000 && newData.val() === now)))"
        },

        "rematch": {
          ".validate": "newData.hasChildren(['X', 'O']) && newData.child('X').isBoolean() && newData.child('O').isBoolean()"
        },

        "chatMessages": {
          // chatMessages is an optional list of messages. Child validation will handle contents.
          "$messageIndex": {
            // Each message must have the correct structure.
            ".validate": "
              newData.hasChildren(['senderSymbol', 'type', 'content', 'timestamp']) &&
              (newData.child('senderSymbol').val() === 'X' || newData.child('senderSymbol').val() === 'O') &&
              (newData.child('type').val() === 'emote' || newData.child('type').val() === 'quickchat') &&
              newData.child('content').isString() && newData.child('content').val().length > 0 && newData.child('content').val().length < 50 &&
              newData.child('timestamp').isNumber()"
          }
        },

        // --- Game-specific validations ---
        "board": {
            ".validate": "($game_key === 'games' || $game_key === 'gobblet-games' || $game_key === 'connect4-games') ? newData.exists() && newData.hasChildren() : !newData.exists()"
        },
        "winningLine": {
             ".validate": "($game_key === 'games' || $game_key === 'gobblet-games' || $game_key === 'connect4-games') ? true : !newData.exists()"
        },
        "homePiles": {
            ".validate": "$game_key === 'gobblet-games' ? newData.exists() && newData.hasChildren(['X', 'O']) : !newData.exists()"
        },
        "fen": {
            ".validate": "$game_key === 'chess-games' ? newData.exists() && newData.isString() : !newData.exists()"
        },
        "lastMove": {
             ".validate": "($game_key === 'chess-games' || $game_key === 'gobblet-games') ? !newData.exists() || newData.val() === null || newData.hasChildren() : !newData.exists()"
        },
        "puzzle": {
            ".validate": "$game_key === 'crossword-games' ? !newData.exists() || newData.val() === null || newData.hasChildren(['words', 'clues', 'width', 'height']) : !newData.exists()"
        },
        "gameState": {
            ".validate": "$game_key === 'crossword-games' ? !newData.exists() || newData.hasChildren() : !newData.exists()"
        },
        "scores": {
            ".validate": "$game_key === 'crossword-games' ? newData.exists() && newData.hasChildren(['X', 'O']) && newData.child('X').isNumber() && newData.child('O').isNumber() : !newData.exists()"
        },
        "chances": {
            ".validate": "$game_key === 'crossword-games' ? newData.exists() && newData.hasChildren(['X', 'O']) && newData.child('X').isNumber() && newData.child('O').isNumber() && newData.child('X').val() >= 0 && newData.child('X').val() <= 3 && newData.child('O').val() >= 0 && newData.child('O').val() <= 3 : !newData.exists()"
        },


        // Disallow any other unknown top-level properties
        "$other": {
          ".validate": "
            $other === 'players' || $other === 'createdAt' || $other === 'currentPlayer' ||
            $other === 'startingPlayer' || $other === 'rematch' || $other === 'winner' ||
            $other === 'board' || $other === 'winningLine' || $other === 'homePiles' ||
            $other === 'fen' || $other === 'lastMove' || $other === 'chatMessages' ||
            $other === 'puzzle' || $other === 'gameState' || $other === 'scores' || $other === 'chances'
          "
        }
      }
    },
    // Default-deny: Disallow reads/writes to any path not explicitly allowed above.
    ".read": false,
    ".write": false
  }
}